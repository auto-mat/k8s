#@ config_vars = [
#@  "DJANGO_SETTINGS_MODULE",
#@  "DJANGO_DEBUG",
#@  "DPNK_STATIC_URL",
#@  "DPNK_AKLUB_URL",
#@  "GUNICORN_NUM_WORKERS",
#@  "GUNICORN_TIMEOUT",
#@  "GUNICORN_PORT",
#@  "AWS_QUERYSTRING_AUTH",
#@  "DPNK_LOG_FILE",
#@  "DPNK_MEDIA_URL",
#@  "DPNK_BROKER_URL",
#@  "DPNK_CACHE_REDIS_LOCATION",
#@  "SINGLE_BEAT_REDIS_SERVER",
#@  "DPNK_ALLOWED_HOSTS",
#@  "METABASE_APP_DOMAIN",
#@  "METABASE_DPNK_INDIVIDUAL_DATA_REPORT_URL",
#@  "METABASE_DPNK_ORGANIZATION_DATA_REPORT_URL",
#@  "METABASE_DPNK_CITY_DATA_REPORT_URL",
#@  "GLS_BASE_URL",
#@  "GLS_DISPATCHED_SUBSIDIARY_BOXES_DATE_FROM",
#@  "GLS_DISPATCHED_SUBSIDIARY_BOXES_DATE_TO",
#@  "FAKTUROID_INVOICE_NUMBER_WIDTH",
#@  "FAKTUROID_BASE_REST_API_URL",
#@  "FAKTUROID_DATE_FROM_CREATE_INVOICES",
#@  "DISABLE_SERVER_SIDE_CURSORS",
#@  "CELERY_CONCURENCY",
#@ ]
#@ secret_vars = [
#@  "DPNK_SECRET_KEY",
#@  "DPNK_DB_NAME",
#@  "DPNK_DB_PASSWORD",
#@  "DPNK_DB_HOST",
#@  "DPNK_DB_USER",
#@  "DPNK_DB_PORT",
#@  "DPNK_MAILING_API_KEY",
#@  "DPNK_ECOMAIL_MAILING_API_KEY",
#@  "NEW_RELIC_LICENSE_KEY",
#@  "NEW_RELIC_APP_NAME",
#@  "DPNK_AWS_ACCESS_KEY_ID",
#@  "DPNK_AWS_SECRET_ACCESS_KEY",
#@  "DPNK_AWS_STORAGE_BUCKET_NAME",
#@  "DPNK_PAYU_KEY_1",
#@  "DPNK_PAYU_KEY_2",
#@  "DPNK_PAYU_POS_AUTH_KEY",
#@  "DPNK_PAYU_POS_ID",
#@  "DPNK_FIO_TOKEN",
#@  "DPNK_RAVEN_DNS",
#@  "DPNK_GOOGLE_TAG_ID",
#@  "DPNK_SOCIAL_AUTH_FACEBOOK_KEY",
#@  "DPNK_SOCIAL_AUTH_FACEBOOK_SECRET",
#@  "DPNK_SOCIAL_AUTH_GOOGLE_OAUTH2_KEY",
#@  "DPNK_SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET",
#@  "DPNK_SOCIAL_AUTH_APPLE_ID_CLIENT",
#@  "DPNK_SOCIAL_AUTH_APPLE_ID_KEY",
#@  "DPNK_SOCIAL_AUTH_APPLE_ID_TEAM",
#@  "DPNK_SOCIAL_AUTH_APPLE_ID_SECRET",
#@  "STRAVA_CLIENT_ID",
#@  "STRAVA_CLIENT_SECRET",
#@  "GLS_PASSWORD",
#@  "GLS_USERNAME",
#@  "FAKTUROID_TEST_USER_ACCOUNT",
#@  "FAKTUROID_TEST_USER_EMAIL",
#@  "FAKTUROID_TEST_API_KEY",
#@  "FAKTUROID_TEST_USER_AGENT_HEADER",
#@  "FAKTUROID_PRODUCTION_USER_ACCOUNT",
#@  "FAKTUROID_PRODUCTION_USER_EMAIL",
#@  "FAKTUROID_PRODUCTION_API_KEY",
#@  "FAKTUROID_PRODUCTION_USER_AGENT_HEADER",
#@  "DPNK_ADMIN_EMAIL",
#@ ]
#@ port = 8000

#@ load("redis.dpnk.lib.yml", "redis")
#@ load("@ytt:template", "template")
#@ def web(app_name, image, config_map, secret_map, replicas, celery_replicas):
apiVersion: v1
items:
- apiVersion: v1
  kind: Service
  metadata:
    name: #@ app_name
  spec:
    ports:
    - name: "8000"
      port: #@ port
      targetPort: #@ port
    selector:
      app: #@ app_name
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: #@ app_name
  spec:
    replicas: #@ replicas
    selector:
      matchLabels:
        app: #@ app_name
    template:
      metadata:
        labels:
          app: #@ app_name
      spec:
        containers:
        - image: #@ image
          name: #@ app_name
          ports:
          - containerPort: #@ port
          securityContext:
            privileged: true
            capabilities:
              add:
                - SYS_ADMIN
          resources: {}
          command: ["/home/aplikace/docker-entrypoint.sh"]
          env:
          #@ for var in config_vars:
          - name: #@ var
            valueFrom:
              configMapKeyRef:
                key: #@ var
                name: #@ config_map
          #@ end
          #@ for var in secret_vars:
          - name: #@ var
            valueFrom:
              secretKeyRef:
                key: #@ var
                name: #@ secret_map
          #@ end
          # livenessProbe:
          #   httpGet:
          #     path: /healthz
          #     port: #@ port
          #   initialDelaySeconds: 60
          #   periodSeconds: 300
          #   timeoutSeconds: 300

  status: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: #@ app_name + "-celery"
  spec:
    replicas: #@ celery_replicas
    selector:
      matchLabels:
        app: #@ app_name + "-celery"
    template:
      metadata:
        labels:
          app: #@ app_name + "-celery"
      spec:
        containers:
        - image: #@ image
          name: #@ app_name + "-celery"
          resources: {}
          command: ["poetry", "run", "celery", "worker", "-A", "project.celery", "--pool=prefork", "--concurrency=8", "--loglevel=info"]
          env:
          #@ for var in config_vars:
          - name: #@ var
            valueFrom:
              configMapKeyRef:
                key: #@ var
                name: #@ config_map
          #@ end
          #@ for var in secret_vars:
          - name: #@ var
            valueFrom:
              secretKeyRef:
                key: #@ var
                name: #@ secret_map
          #@ end
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - test $(($(date +%s) - $(stat -c %Y /tmp/worker_heartbeat))) -lt 10
            initialDelaySeconds: 30
            periodSeconds: 120
          readinessProbe:
            exec:
              command:
                - sh
                - c
                - test -e /tmp/worker_ready
            initialDelaySeconds: 30
            periodSeconds: 120
  status: {}

- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: #@ app_name + "-celery-beat"
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: #@ app_name + "-celery-beat"
    template:
      metadata:
        labels:
          app: #@ app_name + "-celery-beat"
      spec:
        containers:
        - image: #@ image
          name: #@ app_name + "-celery-beat"
          resources: {}
          command: ["poetry", "run", "celery", "beat", "-A", "project.celery", "--scheduler", "django_celery_beat.schedulers:DatabaseScheduler", "--loglevel=info"]
          env:
          #@ for var in config_vars:
          - name: #@ var
            valueFrom:
              configMapKeyRef:
                key: #@ var
                name: #@ config_map
          #@ end
          #@ for var in secret_vars:
          - name: #@ var
            valueFrom:
              secretKeyRef:
                key: #@ var
                name: #@ secret_map
          #@ end
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - poetry run python manage.py check_celerybeat_liveness
            initialDelaySeconds: 30
            periodSeconds: 120
            timeoutSeconds: 60
          readinessProbe:
            exec:
              command:
                - sh
                - c
                - test -e /tmp/worker_ready
            initialDelaySeconds: 30
            periodSeconds: 120
  status: {}
- #@ template.replace(redis(app_name + "-redis-broker"))
- #@ template.replace(redis(app_name + "-redis-cache"))
- #@ template.replace(redis(app_name + "-redis-beat"))
kind: List
metadata: {}
#@ end
