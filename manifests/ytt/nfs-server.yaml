#@ load("@ytt:data", "data")
---
apiVersion: v1
items:
- apiVersion: v1
  kind: Service
  metadata:
    name: nfs-server
  spec:
    type: NodePort
    clusterIP: #@ data.values.nfsServer.clusterIP
    ports:
    - name: "tcp-2049"
      port: 2049
      protocol: TCP
    - name: "udp-111"
      port: 111
      protocol: UDP
    selector:
      app: nfs-server
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: nfs-server
    name: nfs-server
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: nfs-server
    template:
      metadata:
        labels:
          app: nfs-server
      spec:
        containers:
        - image: 439267276348970/nfs-server:0
          name: nfs-server
          imagePullPolicy: "IfNotPresent"
          securityContext:
            privileged: true
          args: [
          "/exports",
          "/exports/mnk-rendering-conf",
          "/exports/mnk-rendering-cache",
          "/exports/mnk-rendering-data",
          "/exports/qgis-server-plugins",
          "/exports/qgis-server-publish",
          "/exports/gisquick-caddy-conf",
          "/exports/gisquick-web-app",
          "/exports/mapserver-map-files",
          "/exports/mnk-gisquick-web-app",
          ]
          volumeMounts:
          - name: nfs-server-persistent-storage
            mountPath: /exports/
        volumes:
        - name: nfs-server-persistent-storage
          persistentVolumeClaim:
            claimName: nfs-server-pv-claim

  status: {}
kind: List
metadata: {}
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: nfs-server-pv-volume
  labels:
    type: local
spec:
  capacity:
    storage: 140Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nfs-server-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 350Gi
  storageClassName: do-block-storage
