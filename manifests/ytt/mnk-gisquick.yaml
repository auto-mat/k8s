#@ load("@ytt:data", "data")
#@ load("redis.lib.yml", "redis")
#@ load("@ytt:template", "template")
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: qgis-server-publish-pv-volume
spec:
  capacity:
    storage: 8Gi
  accessModes:
    - ReadWriteMany
  storageClassName: "nfs"
  mountOptions:
    - hard
    - nfsvers=4.2
  nfs:
    path: /qgis-server-publish
    server: #@ data.values.nfsServer.clusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: qgis-server-publish-pv-claim
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 8Gi
  storageClassName: "nfs"
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: qgis-server-plugins-pv-volume
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteMany
  storageClassName: "nfs"
  mountOptions:
    - hard
    - nfsvers=4.2
  nfs:
    path: /qgis-server-plugins
    server: #@ data.values.nfsServer.clusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: qgis-server-plugins-pv-claim
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
  storageClassName: "nfs"
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: gisquick-caddy-conf-pv-volume
spec:
  capacity:
    storage: 1Mi
  accessModes:
    - ReadWriteMany
  storageClassName: "nfs"
  mountOptions:
    - hard
    - nfsvers=4.2
  nfs:
    path: /gisquick-caddy-conf
    server: #@ data.values.nfsServer.clusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: gisquick-caddy-conf-pv-claim
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Mi
  storageClassName: "nfs"
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mnk-gisquick-webapp-pv-volume
spec:
  capacity:
    storage: 100Mi
  accessModes:
    - ReadWriteMany
  storageClassName: "nfs"
  mountOptions:
    - hard
    - nfsvers=4.2
  nfs:
    path: /mnk-gisquick-web-app
    server: #@ data.values.nfsServer.clusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mnk-gisquick-web-app-pv-claim
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 100Mi
  storageClassName: "nfs"
---
apiVersion: v1
items:
- apiVersion: v1
  kind: Service
  metadata:
    name: qgis-server
  spec:
    ports:
    - name: "5555"
      port: 5555
    selector:
      app: qgis-server
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: qgis-server
    name: qgis-server
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qgis-server
    template:
      metadata:
        labels:
          app: qgis-server
      spec:
        containers:
        - image: gisquick/qgis-server:3.22
          name: qgis-server
          imagePullPolicy: "IfNotPresent"
          env:
            - name: QGIS_SERVER_IGNORE_BAD_LAYERS
              valueFrom:
                configMapKeyRef:
                  key: QGIS_SERVER_IGNORE_BAD_LAYERS
                  name: mnk-gisquick-env
            - name: QGIS_SERVER_LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  key: QGIS_SERVER_LOG_LEVEL
                  name: mnk-gisquick-env
            - name: QGIS_PLUGINPATH
              valueFrom:
                configMapKeyRef:
                  key: QGIS_PLUGINPATH
                  name: mnk-gisquick-env
            - name: QGIS_SERVER_PARALLEL_RENDERING
              valueFrom:
                configMapKeyRef:
                  key: QGIS_SERVER_PARALLEL_RENDERING
                  name: mnk-gisquick-env
          ports:
          - containerPort: 5555
          resources:
            requests:
              memory: 512Mi
            limits:
              memory: 5Gi
          volumeMounts:
          - name: qgis-server-publish
            mountPath: /publish
          - name: qgis-server-plugins
            mountPath: /usr/lib/qgis/python/plugins
        initContainers:
        - name: check-nfs-server-avaibility
          image: busybox:latest
          command: ["sh", "-c", "while true; do nc -zw3 nfs-server 2049 && break || echo 'Checking nfs-server 2049 port...'; done"]
        volumes:
        - name: qgis-server-publish
          persistentVolumeClaim:
            claimName: qgis-server-publish-pv-claim
        - name: qgis-server-plugins
          persistentVolumeClaim:
            claimName: qgis-server-plugins-pv-claim
  status: {}

- apiVersion: v1
  kind: Service
  metadata:
    name: mnk-gisquick-server
  spec:
    ports:
    - name: "3000"
      port: 3000
    selector:
      app: mnk-gisquick-server
  status:
    loadBalancer: {}

- apiVersion: apps/v1
  kind: Deployment
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: mnk-gisquick-server
    name: mnk-gisquick-server
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: mnk-gisquick-server
    template:
      metadata:
        labels:
          app: mnk-gisquick-server
      spec:
        containers:
        - image: auto0mat/mnk-gisquick-server:2024.0
          name: mnk-gisquick-server
          imagePullPolicy: "IfNotPresent"
          ports:
          - containerPort: 3000
          resources: {}
          volumeMounts:
          - mountPath: /publish
            name: qgis-server-publish
          - name: qgis-server-cache
            mountPath: /cache
          - name: qgis-server-thumbnails
            mountPath: /thumbnails
          env:
            - name: GISQUICK_PROJECTS_ROOT
              valueFrom:
                configMapKeyRef:
                  key: GISQUICK_PROJECTS_ROOT
                  name: mnk-gisquick-env
            - name: GISQUICK_MAPSERVER_URL
              valueFrom:
                configMapKeyRef:
                  key: GISQUICK_MAPSERVER_URL
                  name: mnk-gisquick-env
            - name: MAPSERVER_URL
              valueFrom:
                configMapKeyRef:
                  key: GISQUICK_MAPSERVER_URL
                  name: mnk-gisquick-env
            - name: GISQUICK_LANGUAGE
              valueFrom:
                configMapKeyRef:
                  key: GISQUICK_LANGUAGE
                  name: mnk-gisquick-env
            - name: GISQUICK_SIGNUP_API
              valueFrom:
                configMapKeyRef:
                  key: GISQUICK_SIGNUP_API
                  name: mnk-gisquick-env
            - name: AUTH_SESSION_EXPIRATION
              valueFrom:
                configMapKeyRef:
                  key: AUTH_SESSION_EXPIRATION
                  name: mnk-gisquick-env
            - name: GISQUICK_MAP_CACHE_ROOT
              valueFrom:
                configMapKeyRef:
                  key: GISQUICK_MAP_CACHE_ROOT
                  name: mnk-gisquick-env
            - name: GISQUICK_THUMBNAILS_ROOT
              valueFrom:
                configMapKeyRef:
                  key: GISQUICK_THUMBNAILS_ROOT
                  name: mnk-gisquick-env
            - name: AUTH_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: AUTH_SECRET_KEY
                  name: gisquick-access
            - name: WEB_SITE_URL
              valueFrom:
                configMapKeyRef:
                  key: WEB_SITE_URL
                  name: mnk-gisquick-env
            - name: POSTGRES_HOST
              valueFrom:
                secretKeyRef:
                  key: POSTGRES_HOST
                  name: gisquick-access
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  key: POSTGRES_DB
                  name: gisquick-access
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  key: POSTGRES_USER
                  name: gisquick-access
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: POSTGRES_PASSWORD
                  name: gisquick-access
            - name: POSTGRES_PORT
              valueFrom:
                secretKeyRef:
                  key: POSTGRES_PORT
                  name: gisquick-access
            - name: POSTGRES_SSL_MODE
              valueFrom:
                configMapKeyRef:
                  key: POSTGRES_SSL_MODE
                  name: mnk-gisquick-env
            - name: POSTGRES_STATEMENT_CACHE_MODE
              valueFrom:
                configMapKeyRef:
                  key: POSTGRES_STATEMENT_CACHE_MODE
                  name: mnk-gisquick-env
            - name: REDIS_ADDR
              valueFrom:
                secretKeyRef:
                  key: REDIS_ADDR
                  name: gisquick-access
        initContainers:
        - name: check-nfs-server-avaibility
          image: busybox:latest
          command: ["sh", "-c", "while true; do nc -zw3 nfs-server 2049 && break || echo 'Checking nfs-server 2049 port...'; done"]
        - name: set-gisquick-publish-dir-permission
          image: busybox:latest
          command: ["sh", "-c", "chmod -R 777 /mnt"]
          volumeMounts:
          - name: qgis-server-publish
            mountPath: /mnt
        volumes:
        - name: qgis-server-publish
          persistentVolumeClaim:
            claimName: qgis-server-publish-pv-claim
        - name: qgis-server-cache
          emptyDir: {}
        - name: qgis-server-thumbnails
          emptyDir: {}
  status: {}

- apiVersion: v1
  kind: Service
  metadata:
    name: mnk-gisquick-caddy
  spec:
    ports:
    - name: "80"
      port: 80
    - name: "2019"
      port: 2019
    - name: "10080"
      port: 10080
    selector:
      app: mnk-gisquick-caddy
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: mnk-gisquick-caddy
    name: mnk-gisquick-caddy
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: mnk-gisquick-caddy
    template:
      metadata:
        labels:
          app: mnk-gisquick-caddy
      spec:
        containers:
        - image: caddy:2-alpine
          name: caddy
          imagePullPolicy: "IfNotPresent"
          ports:
          - containerPort: 80
          resources: {}
          env:
            - name: GISQUICK_SERVER_ADDR
              valueFrom:
                configMapKeyRef:
                  key: GISQUICK_SERVER_ADDR
                  name: mnk-gisquick-env
            - name: QGIS_SERVER_ADDR
              valueFrom:
                configMapKeyRef:
                  key: QGIS_SERVER_ADDR
                  name: mnk-gisquick-env
            - name: MNK_GISQUICK_RSS_FEED_SERVER_ADDR
              valueFrom:
                configMapKeyRef:
                  key: MNK_GISQUICK_RSS_FEED_SERVER_ADDR
                  name: mnk-gisquick-env
          volumeMounts:
          - name: gisquick-caddy-conf
            mountPath: /etc/caddy
          - name: mnk-gisquick-web-app
            mountPath: /var/www/html/
        initContainers:
        - name: check-nfs-server-avaibility
          image: busybox:latest
          command: ["sh", "-c", "while true; do nc -zw3 nfs-server 2049 && break || echo 'Checking nfs-server 2049 port...'; done"]
        - name: get-caddy-conf
          image: busybox:latest
          command: ["sh", "-c", "cd /mnt; wget -O Caddyfile 'https://raw.githubusercontent.com/auto-mat/gisquick-caddy/main/Caddyfile'"]
          volumeMounts:
          - name: gisquick-caddy-conf
            mountPath: /mnt
        - name: mnk-gisquick-web-map
          image: auto0mat/mnk-gisquick-web-map:2024.1
          volumeMounts:
          - name: mnk-gisquick-web-app
            mountPath: /assets
        - name: mnk-gisquick-web-settings
          image: auto0mat/mnk-gisquick-web-settings:2024.0
          volumeMounts:
          - name: mnk-gisquick-web-app
            mountPath: /assets
        - name: gisquick-web-accounts
          image: gisquick/web-accounts
          command: ["copy-assets", "/var/www", "/assets/accounts"]
          volumeMounts:
          - name: mnk-gisquick-web-app
            mountPath: /assets
        - name: copy-gisquick-web-app-map-dir-content
          image: busybox:latest
          command: ["sh", "-c", "while [ ! -d /assets/map/map/ ]; do sleep 2; done; mv /assets/map/map/* /assets/map/; rmdir /assets/map/map/"]
          volumeMounts:
          - name: mnk-gisquick-web-app
            mountPath: /assets
        volumes:
        - name: gisquick-caddy-conf
          persistentVolumeClaim:
            claimName: gisquick-caddy-conf-pv-claim
        - name: mnk-gisquick-web-app
          persistentVolumeClaim:
            claimName: mnk-gisquick-web-app-pv-claim
  status: {}

- apiVersion: v1
  kind: Service
  metadata:
    name: mnk-gisquick-comments-app
  spec:
    ports:
    - name: "3000"
      port: 3000
    selector:
      app: mnk-gisquick-comments-app
  status:
    loadBalancer: {}

- apiVersion: apps/v1
  kind: Deployment
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: mnk-gisquick-comments-app
    name: mnk-gisquick-comments-app
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: mnk-gisquick-comments-app
    template:
      metadata:
        labels:
          app: mnk-gisquick-comments-app
      spec:
        containers:
        - image: djyde/cusdis:1.3
          name: mnk-gisquick-comments-app
          imagePullPolicy: "IfNotPresent"
          ports:
          - containerPort: 3000
          resources: {}
          env:
            - name: DB_TYPE
              valueFrom:
                configMapKeyRef:
                  key: COMMENTS_APP_DB_TYPE
                  name: mnk-gisquick-env
            - name: NEXTAUTH_URL
              valueFrom:
                configMapKeyRef:
                  key: NEXTAUTH_URL
                  name: mnk-gisquick-env
            - name: HOST
              valueFrom:
                configMapKeyRef:
                  key: HOST
                  name: mnk-gisquick-env
            - name: USERNAME
              valueFrom:
                secretKeyRef:
                  key: COMMENTS_APP_USERNAME
                  name: mnk-gisquick-access
            - name: PASSWORD
              valueFrom:
                secretKeyRef:
                  key: COMMENTS_APP_PASSWORD
                  name: mnk-gisquick-access
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  key: COMMENTS_APP_JWT_SECRET
                  name: mnk-gisquick-access
            - name: POSTGRES_HOST
              valueFrom:
                secretKeyRef:
                  key: COMMENTS_APP_POSTGRES_HOST
                  name: mnk-gisquick-access
            - name: POSTGRES_PORT
              valueFrom:
                secretKeyRef:
                  key: COMMENTS_APP_POSTGRES_PORT
                  name: mnk-gisquick-access
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  key: COMMENTS_APP_POSTGRES_DB
                  name: mnk-gisquick-access
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  key: COMMENTS_APP_POSTGRES_USER
                  name: mnk-gisquick-access
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: COMMENTS_APP_POSTGRES_PASSWORD
                  name: mnk-gisquick-access
            - name: POSTGRES_SSL_MODE
              valueFrom:
                secretKeyRef:
                  key: COMMENTS_APP_POSTGRES_SSL_MODE
                  name: mnk-gisquick-access
            - name: DB_URL
              value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@$(POSTGRES_HOST):$(POSTGRES_PORT)/$(POSTGRES_DB)?sslmode=$(POSTGRES_SSL_MODE)"
        restartPolicy: Always
  status: {}

- apiVersion: v1
  kind: Service
  metadata:
    name: mnk-gisquick-rss-app
  spec:
    ports:
    - name: "8010"
      port: 8010
    selector:
      app: mnk-gisquick-rss-app
  status:
    loadBalancer: {}

- apiVersion: apps/v1
  kind: Deployment
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: mnk-gisquick-rss-app
    name: mnk-gisquick-rss-app
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: mnk-gisquick-rss-app
    template:
      metadata:
        labels:
          app: mnk-gisquick-rss-app
      spec:
        containers:
        - image: auto0mat/mnk-gisquick-rss:2024.0
          name: mnk-gisquick-rss-app
          imagePullPolicy: "IfNotPresent"
          ports:
          - containerPort: 8010
          resources: {}
          volumeMounts:
            - mountPath: /mnk-rss/config.yaml
              subPath: config.yaml
              name: mnk-gisquick-rss-conf
        volumes:
        - name: mnk-gisquick-rss-conf
          configMap:
            name: mnk-gisquick-env
        restartPolicy: Always
  status: {}

- #@ template.replace(redis("mnk-gisquick-redis-broker"))
kind: List
metadata: {}